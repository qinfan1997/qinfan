library(Hmisc)

#“otu_table.txt” 是一个微生物丰度表
otu <- read.delim('otu_table.txt', row.name = 1, check.names = FALSE)

otu1 <- otu
otu1[otu1>0] <- 1
otu <- otu[which(rowSums(genus1) >= 4), ]    #只保留在 4 个及以上样本中出现的otu
#计算两个otu之间是否存在丰度变化的相关性，以 spearman 相关系数为例
otu_corr <- rcorr(t(otu), type = 'spearman')
 
#阈值筛选
#将 spearman 相关系数低于 0.5 的关系剔除，即 r>=0.5
r <- otu_corr$r
r[abs(r) < 0.5] <- 0
 
#选取显著性 p 值小于 0.05 的相关系数，即 p<0.05
p <- otu_corr$P
p <- p.adjust(p, method = 'BH')    #可选 p 值校正，这里使用 BH 法校正 p 值
p[p>=0.05] <- -1
p[p<0.05 & p>=0] <- 1
p[p==-1] <- 0
 
#根据上述筛选的 r 值和 p 值保留数据
z <- r * p
diag(z) <- 0    #将相关矩阵中对角线中的值（代表了自相关）转为 0
 
#如此便得到了邻接矩阵格式的网络文件（微生物otu的相关系数矩阵）
write.table(data.frame(z, check.names = FALSE), 'otu_corr.matrix.txt', col.names = NA, sep = '\t', quote = FALSE)

##获得网络
library(igraph)
 
#将邻接矩阵转化为 igraph 网络的邻接列表
#构建含权的无向网络，权重代表了微生物属间丰度的 spearman 相关系数
g <- graph.adjacency(z, weighted = TRUE, mode = 'undirected')
g
 
#自相关也可以通过该式去除
g <- simplify(g)
 
#孤立节点的删除（删除度为 0 的节点）
g <- delete.vertices(g, names(degree(g)[degree(g) == 0]))
 
#该模式下，边权重代表了相关系数
#由于权重通常为正值，因此最好取个绝对值，相关系数重新复制一列
E(g)$correlation <- E(g)$weight
E(g)$weight <- abs(E(g)$weight)
 
#为节点（otu）添加属性信息（界门纲目科属水平注释）
#“otu_taxonomyD6_D12.txt” 记录了微生物的属性，读入该表后根据已知网络节点匹配对应的行
tax <- read.delim('otu_taxonomyD6_D12.txt', row.name = 1, check.names = FALSE, stringsAsFactors = FALSE)

tax <- tax[as.character(V(g)$name), ]
 
V(g)$kingdom <- tax$kingdom
V(g)$phylum <- tax$phylum
V(g)$class <- tax$class
V(g)$order <- tax$order
V(g)$family <- tax$family
V(g)$genus <- tax$genus
 
#查看网络图
g
plot(g)

##网络文件输出，输出特定的网络文件类型，便于后续数据分析需求
#邻接矩阵，出了上述提到的在计算相关系数后，输出筛选后的相关系数矩阵外
#还可以由 igraph 的邻接列表转换
adj_matrix <- as.matrix(get.adjacency(g, attr = 'correlation'))
write.table(data.frame(adj_matrix, check.names = FALSE), 'network.adj_matrixD6_D12.txt', col.names = NA, sep = '\t', quote = FALSE)
 
#边列表
edge <- data.frame(as_edgelist(g))    #igraph 的邻接列表转为边列表
 
edge_list <- data.frame(
    source = edge[[1]],
    target = edge[[2]],
    weight = E(g)$weight,
    correlation = E(g)$correlation
)
head(edge_list)

write.table(edge_list, 'network.edge_listD6_D12.txt', sep = '\t', row.names = FALSE, quote = FALSE)

#节点属性列表
node_list <- data.frame(
    label = names(V(g)),
    kingdom = V(g)$kingdom,
    phylum = V(g)$phylum,
    class = V(g)$class,
    order = V(g)$order,
    family = V(g)$family
)
head(node_list)

write.table(node_list, 'network.node_listD6_D12.txt', sep = '\t', row.names = FALSE, quote = FALSE)

library(igraph)
 
#输入数据示例，邻接矩阵
#这是一个微生物互作网络，数值“1”表示微生物 OTU 之间存在互作，“0”表示无互作
adjacency_unweight <- read.delim('adjacency_weight01D6_D12.txt', row.names = 1, sep = '\t', check.names = FALSE)
 
#邻接矩阵 -> igraph 的邻接列表，获得非含权的无向网络
igraph = graph_from_adjacency_matrix(as.matrix(adjacency_unweight), mode = 'undirected', weighted = NULL, diag = FALSE)
igraph    #igraph 的邻接列表      

##子图与普查
#所有尺寸的团的普查可以提供一个快照，将显示各尺寸的团的数量
census <- table(sapply(cliques(igraph), length))
census
plot(census)
 
#k 核
cores <- graph.coreness(igraph)
cores
sna::gplot.target(adjacency_unweight, cores, usearrows = FALSE, vertex.col = cores)
 
#二元组（dyad）和三元组（triad）
dyad.census(simplify(igraph))
triad.census(simplify(igraph))
#节点数量（number of nodes）和边数量（number of edges）
nodes_num <- length(V(igraph))
nodes_num
 
edges_num <- length(E(igraph))
edges_num
 
#平均度（average degree）
average_degree <- mean(degree(igraph))
#或者，2x边数量/节点数量
average_degree <- 2*edges_num/nodes_num
average_degree
 
#平均加权度（average weighted degree），仅适用于含权网络
#average_weight_degree <- mean(strength(igraph))
 
#节点和边连通度（connectivity）
nodes_connectivity <- vertex.connectivity(igraph)
nodes_connectivity

edges_connectivity <- edge.connectivity(igraph)
edges_connectivity
 
#平均路径长度（average path length）
average_path_length <- average.path.length(igraph, directed = FALSE)
average_path_length
 
#网络直径（diameter）
graph_diameter <- diameter(igraph, directed = FALSE)
graph_diameter
 
#图密度（density）
graph_density <- graph.density(igraph)
graph_density
 
#聚类系数（clustering coefficient）
clustering_coefficient <- transitivity(igraph)
clustering_coefficient
 
#介数中心性（betweenness centralization)
betweenness_centralization <- centralization.betweenness(igraph)$centralization
betweenness_centralization
 
#度中心性（degree centralization）
degree_centralization <- centralization.degree(igraph)$centralization
degree_centralization
 
#模块性（modularity），详见 ?cluster_fast_greedy，?modularity，有多种模型
fc <- cluster_fast_greedy(igraph)
modularity <- modularity(igraph, membership(fc))

#选择部分做个汇总输出
igraph_character <- data.frame(
    nodes_num,    #节点数量（number of nodes）
    edges_num,    #边数量（number of edges）
    average_degree,    #平均度（average degree)
    nodes_connectivity,    #节点连通度（vertex connectivity）
    edges_connectivity,    #边连通度（edges connectivity）
    average_path_length,    #平均路径长度（average path length）
    graph_diameter,    #网络直径（diameter）
    graph_density,    #图密度（density）
    clustering_coefficient,    #聚类系数（clustering coefficient）
    betweenness_centralization,    #介数中心性（betweenness centralization)
    degree_centralization,    #度中心性
    modularity    #模块性（modularity）
)
igraph_character
 
write.table(igraph_character, 'igraph_characterD6_D12.txt', sep = '\t', row.names = FALSE, quote = FALSE)

##igraph 包计算网络模块
library(igraph)
 
#输入数据示例，邻接矩阵
#这是一个微生物互作网络，数值“1”表示微生物 OTU 之间存在互作，“0”表示无互作
adjacency_unweight <- read.delim('adjacency_weight01D6_D12.txt', row.names = 1, sep = '\t', check.names = FALSE)
 
#邻接矩阵 -> igraph 的邻接列表，获得非含权的无向网络
igraph <- graph_from_adjacency_matrix(as.matrix(adjacency_unweight), mode = 'undirected', weighted = NULL, diag = FALSE)
igraph    #igraph 的邻接列表
 
#计算节点度
V(igraph)$degree <- degree(igraph)
 
#模块划分，详情 ?cluster_fast_greedy，有多种模型
set.seed(123)
V(igraph)$modularity <- membership(cluster_fast_greedy(igraph))
 
#输出各节点（微生物 OTU）名称、节点度、及其所划分的模块的列表
nodes_list <- data.frame(
    nodes_id = V(igraph)$name, 
        degree = V(igraph)$degree, 
        modularity = V(igraph)$modularity
)
 
write.table(nodes_list, 'nodes_list6-12.txt', sep = '\t', row.names = FALSE, quote = FALSE)      
                                                                         
##计算模块内连通度（Zi）和模块间连通度（Pi）
source('zi_pi.r')
 
#上述的邻接矩阵类型的网络文件
adjacency_unweight <- read.delim('adjacency_weight01D6_D12.txt', row.names = 1, sep = '\t', check.names = FALSE)
 
#节点属性列表，包含节点所划分的模块
nodes_list <- read.delim('nodes_list6-12.txt', row.names = 1, sep = '\t', check.names = FALSE)
 
#两个文件的节点顺序要一致
nodes_list <- nodes_list[rownames(adjacency_unweight), ]
 
#计算模块内连通度（Zi）和模块间连通度（Pi）
#指定邻接矩阵、节点列表、节点列表中节点度和模块度的列名称
zi_pi <- zi.pi(nodes_list, adjacency_unweight, degree = 'degree', modularity_class = 'modularity')
head(zi_pi)
 
write.table(zi_pi, 'zi_pi_result6-12.txt', sep = '\t', row.names = FALSE, quote = FALSE)



##可再根据阈值对节点划分为 4 种类型，并作图展示其分布
library(ggplot2)
 
zi_pi <- na.omit(zi_pi)   #NA 值最好去掉，不要当 0 处理
zi_pi[which(zi_pi$within_module_connectivities < 2.5 & zi_pi$among_module_connectivities < 0.62),'type'] <- 'Peripherals'
zi_pi[which(zi_pi$within_module_connectivities < 2.5 & zi_pi$among_module_connectivities > 0.62),'type'] <- 'Connectors'
zi_pi[which(zi_pi$within_module_connectivities > 2.5 & zi_pi$among_module_connectivities < 0.62),'type'] <- 'Module hubs'
zi_pi[which(zi_pi$within_module_connectivities > 2.5 & zi_pi$among_module_connectivities > 0.62),'type'] <- 'Network hubs'
 
ggplot(zi_pi, aes(among_module_connectivities, within_module_connectivities)) +
geom_point(aes(color = type), alpha = 0.5, size = 2) +
scale_color_manual(values = c('gray','red','blue','purple'),
    limits = c('Peripherals', 'Connectors', 'Module hubs', 'Network hubs'))+
theme(panel.grid = element_blank(), axis.line = element_line(colour = 'black'),
    panel.background = element_blank(), legend.key = element_blank()) +
labs(x = 'Among-module connectivities', y = 'Within-module connectivities', color = '') +
geom_vline(xintercept = 0.62) +
geom_hline(yintercept = 2.5)
